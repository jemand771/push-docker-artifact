name: artifact-push
description: Push docker image workflow artifacts to ghcr
inputs:
  GITHUB_TOKEN:
    description: Token for turnstyle and accessing ghcr. Set to github.token
    required: true
  use-turnstyle:
    description: Prevent parallel builds
    required: false
    default: "true"
runs:
  using: composite
  steps:
    - name: Turnstyle
      uses: softprops/turnstyle@v1
      if: ${{ fromJSON(inputs.use-turnstyle) }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.GITHUB_TOKEN }}
    - name: Download images
      uses: actions/github-script@v3.1.0
      with:
        script: |
          var artifacts = await github.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{github.event.workflow_run.id }},
          });
          var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "docker-images"
          })[0];
          var download = await github.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          var fs = require('fs');
          fs.writeFileSync('${{github.workspace}}/docker-images.zip', Buffer.from(download.data));
    - run: unzip docker-images.zip
      shell: bash
    - name: import images
      run: for file in *.tar; do docker load < $file; done
      shell: bash
    - run: docker image ls
      shell: bash
    - name: push all images
      run: for image in $(cat docker-images.txt); do echo pushing $image; docker push $image; done
      shell: bash
